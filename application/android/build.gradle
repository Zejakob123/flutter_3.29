allprojects {
    repositories {
        google()
        mavenCentral()
    }

    subprojects {
      afterEvaluate { project ->
        if (project.hasProperty('android')) {
          project.android {
            if (namespace == null || namespace.isEmpty()) {
              def defaultNamespace = project.group.toString().replace('.', '_')
              namespace = defaultNamespace
            }
            compileSdkVersion = 34
            buildFeatures {
              buildConfig = true
            }
          }

          // Task to ensure namespace and remove package attribute
          project.tasks.register("fixManifestsAndNamespace") {
            doLast {
              // Ensure namespace in build.gradle
              def buildGradleFile = file("${project.projectDir}/build.gradle")
              if (buildGradleFile.exists()) {
                def buildGradleContent = buildGradleFile.getText('UTF-8')
                def manifestFile = file("${project.projectDir}/src/main/AndroidManifest.xml")
                if (manifestFile.exists()) {
                  def manifestContent = manifestFile.getText('UTF-8')
                  def packageName = manifestContent.find(/package="([^"]+)"/) { match, p -> p }
                  if (packageName && !buildGradleContent.contains("namespace")) {
                    println "Setting namespace in ${buildGradleFile}"
                    buildGradleContent = buildGradleContent.replaceFirst(
                      /android\s*\{/, "android {\n    namespace '${packageName}'"
                    )
                    buildGradleFile.write(buildGradleContent, 'UTF-8')
                  }
                }
              }

              // Remove package attribute from AndroidManifest.xml
              def manifests = fileTree(dir: project.projectDir, includes: ['/AndroidManifest.xml'])
              manifests.each { File manifestFile ->
                def manifestContent = manifestFile.getText('UTF-8')
                if (manifestContent.contains('package=')) {
                  println "Removing package attribute from ${manifestFile}"
                  manifestContent = manifestContent.replaceAll(/package="[^"]*"/, '')
                  manifestFile.write(manifestContent, 'UTF-8')
                }
              }
            }
          }

          // Ensure the task runs before the build process
          project.tasks.matching { it.name.startsWith("preBuild") }.all {
            dependsOn project.tasks.named("fixManifestsAndNamespace")
          }
        }
        if (project.hasProperty('kotlin')) {
          project.tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
                  kotlinOptions {
                      jvmTarget = "17"
                  }
              }

        }
      }
      

    }
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
subprojects {
    project.evaluationDependsOn(':app')
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}
configurations.all {
    resolutionStrategy {
        force 'androidx.core:core-ktx:1.6.0'
        }
}